name: Build and Deploy Services

on:
  push:
    branches: [mv]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Add Java setup
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Add Maven build step for all services
      - name: Build with Maven
        run: |
          cd UserService
          mvn clean package -DskipTests
          cd ../MarketplaceService
          mvn clean package -DskipTests
          cd ../EventService
          mvn clean package -DskipTests
          cd ../PostService
          mvn clean package -DskipTests
          cd ../FeedService
          mvn clean package -DskipTests
          cd ../GatewayService
          mvn clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate tag
        id: tag
        run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Build and push user-service
      - name: Build and push user-service
        uses: docker/build-push-action@v4
        with:
          context: ./UserService
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/user-service:${{ steps.tag.outputs.tag }}

      # Build and push marketplace-service
      - name: Build and push marketplace-service
        uses: docker/build-push-action@v4
        with:
          context: ./MarketplaceService
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/marketplace-service:${{ steps.tag.outputs.tag }}

      # Build and push event-service
      - name: Build and push event-service
        uses: docker/build-push-action@v4
        with:
          context: ./EventService
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/event-service:${{ steps.tag.outputs.tag }}

      # Build and push frontend
      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./Frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ steps.tag.outputs.tag }}

      # Build and push post-service
      - name: Build and push post-service
        uses: docker/build-push-action@v4
        with:
          context: ./PostService
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/post-service:${{ steps.tag.outputs.tag }}

      # Build and push feed-service
      - name: Build and push feed-service
        uses: docker/build-push-action@v4
        with:
          context: ./FeedService
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/feed-service:${{ steps.tag.outputs.tag }}

      # Build and push gateway-service
      - name: Build and push gateway-service
        uses: docker/build-push-action@v4
        with:
          context: ./GatewayService
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/gateway-service:${{ steps.tag.outputs.tag }}

#  deploy-to-ec2:
#    needs: build-and-push
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#
#      # Prepare .env file on the runner
#      - name: Prepare files
#        run: |
#          echo "TAG=${{ needs.build-and-push.outputs.tag }}" > .env
#          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
#
#      # Create deployment directory on EC2
#      - name: Create deployment directory
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ec2-user
#          key: ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            mkdir -p ~/deployment
#
#      # Copy the files to EC2
#      - name: Copy docker-compose file
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ec2-user
#          key: ${{ secrets.EC2_SSH_KEY }}
#          source: "docker-compose.prod.yml,.env"
#          target: "~/deployment"
#
#      # Deploy using docker-compose
#      - name: Deploy with docker-compose
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ec2-user
#          key: ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            cd ~/deployment
#            docker-compose -f docker-compose.prod.yml pull
#            docker-compose -f docker-compose.prod.yml up -d
#
#      - name: Update frontend config
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ec2-user
#          key: ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            cd ~/deployment
#            echo "window.CONFIG = {" > frontend-config.js
#            echo "  USER_SERVICE_URL: 'http://${{ secrets.EC2_HOST }}:8088/api/users'," >> frontend-config.js
#            echo "  POST_SERVICE_URL: 'http://${{ secrets.EC2_HOST }}:8088/api/posts'," >> frontend-config.js
#            echo "  MARKETPLACE_SERVICE_URL: 'http://${{ secrets.EC2_HOST }}:8088/api/marketplace'," >> frontend-config.js
#            echo "  FEED_SERVICE_URL: 'http://${{ secrets.EC2_HOST }}:8088/api/feed'," >> frontend-config.js
#            echo "  EVENT_SERVICE_URL: 'http://${{ secrets.EC2_HOST }}:8088/api/events'," >> frontend-config.js
#            echo "  CHATBOT_SERVICE_URL: 'http://${{ secrets.EC2_HOST }}:5000/api/chat'," >> frontend-config.js
#            echo "};" >> frontend-config.js
#
#            docker cp frontend-config.js $(docker-compose -f docker-compose.prod.yml ps -q frontend):/app/public/
#
#
#      # Verify deployment
#      - name: Verify deployment
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ec2-user
#          key: ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            cd ~/deployment
#            docker-compose -f docker-compose.prod.yml ps